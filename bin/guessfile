#!/usr/bin/perl

use File::Find;
use Getopt::Std;
getopts('aid:', \%opt) or usage();
my @dirs =  split /:/, $opt{d} // default_dirlist();
my %prune = map {$_ => 1} split /:/, $ENV{GUESSFILE_PRUNE} // ".git";


my $full_path;
my $re = do { my $rx = pat_to_regex(shift());
              $full_path = ($rx =~ m#/#);
              $rx = "(?i)$rx" if $opt{i};
              qr/$rx/;
            };

my @match;
find(sub { $File::Find::prune=1, return if $prune{$_};
           my $target = $full_path ? $File::Find::name : $_;
           return if ! $opt{a} && ! -f ;
           print $File::Find::name, "\n" if $target =~ /$re/ },
     @dirs);


sub pat_to_regex {
  my ($before) = my ($pat) = @_;
  $pat =~ s#::#/#g;
  $pat =~ s#\.#\\.#g;
  $pat =~ s#\*#.*#g;
  if ($pat =~ /\\\. \w+ \z/x) {
    $pat .= "\\z";
  }
#  warn "  $before -> /$pat/\n";
  return $pat;
}

sub default_dirlist {
    return $ENV{GUESSFILE_PATH} // ".";
}


sub usage {
    my $default_dirlist = default_dirlist();
    print STDERR qq{guessfile [-ai] [-d dir1:dir2:â€¦] pattern

    -a : return all matching paths, not just plain files
    -i : case-insensitive atching
    -d dirlist : search directories in dirlist instead of $default_dirlist

    patterns are generally like shell globs
      except that :: is automatically converted to /
      and they are _unanchored_
        unless they end with a .xyz-type suffix, which _is_ anchored

      patterns match base filenames only, not full paths
        unless they contain a slash
};
    exit 2;
}
